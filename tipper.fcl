/*
	Example: A tip calculation FIS (fuzzy inference system)
	Calculates tip based on 'servie' and 'food'

	If you want to about this example (and fuzzy logic), please 
	read Matlab's tutorial on fuzzy logic toolbox 
	http://www.mathworks.com/access/helpdesk/help/pdf_doc/fuzzy/fuzzy.pdf

									Pablo Cingolani 
									pcingola@users.sourceforge.net
*/

FUNCTION_BLOCK tipper	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	dx : REAL;
	dy : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	speed : REAL;
	angle : REAL;
END_VAR

FUZZIFY dx			// Fuzzify input variable 'dx': {'farbehind', 'behind' , 'ahead', 'farahead'} 
	TERM farbehind := (-10, 1) (-7, 1) (-4,0) ;
//	TERM behind := (-6, 0) (-3,1) (-1,1) (0,0);
	TERM behind := (-6, 0) (-2.5,1) (0,0);
//	TERM equal := (6, 0) (9, 1);
//	TERM ahead := (0, 0) (1, 1) (3, 1) (6, 0);
	TERM ahead := (0, 0) (2.5, 1) (6, 0);
	TERM farahead := (4, 0) (7, 1) (10, 1);
END_FUZZIFY

FUZZIFY dy			// Fuzzify input variable 'dy': {'verylow', 'low' , 'high', 'veryhigh'}
	TERM verylow := (-5, 1) (-3,1) (-2,0);
//	TERM low := (-3, 0) (-2,1) (-1,1) (0,0);
	TERM low := (-3, 0) (-1.5, 1) (0,0);
//	TERM equal := (6, 0) (9, 1);
	TERM high := (0, 0) (1.5,1) (3,0);
//	TERM high := (0, 0) (1, 1) (2,1) (3,0);
	TERM veryhigh := (2, 0) (3, 1) (5, 1);
END_FUZZIFY

DEFUZZIFY speed			// Defzzzify output variable 'speed' : {'muchslower', 'slower', 'faster', 'muchfaster'}
	TERM muchslower := (-5, 1) (-3,1) (-2,0);
	TERM slower := (-3, 0) (-2,1) (-1,1) (0,0);
//	TERM slower := (-3, 0) (-1.5,1) (0,0);
//	TERM faster := (0, 0) (1.5,1) (3,0);
	TERM faster := (0, 0) (1, 1) (2,1) (3,0);
	TERM muchfaster := (2, 0) (3, 1) (5, 1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY angle 		// Defzzzify output variable 'angle' : {'muchsmaller', 'smaller', 'bigger', 'muchbigger'}
	TERM muchsmaller := (-0.5,1) (-0.2,1) (-0.1,0);
	TERM smaller := (-0.2,0) (-0.1,1) (0,0);
//	TERM smaller := (-25,0) (-10,1) (0,0);
	TERM bigger := (0,0) (0.1,1) (0.2,0) ;
//	TERM bigger := (0,0) (10,1) (25,0);
	TERM muchbigger := (0.1,0) (0.2,1) (0.5,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF dx IS farbehind THEN speed IS muchfaster;
	RULE 2 : IF dx IS behind THEN speed IS faster;
	RULE 3 : IF dx IS ahead THEN speed IS slower;
	RULE 4 : IF dx IS farahead THEN speed IS muchslower;
	RULE 5 : IF dy IS verylow THEN angle IS muchbigger;
	RULE 6 : IF dy IS low THEN angle IS bigger;
	RULE 7 : IF dy IS high THEN angle IS smaller;
	RULE 8 : IF dy IS veryhigh THEN angle IS muchsmaller; 
	
	/*RULE 1 : IF dx IS farbehind THEN speed IS muchfaster;
	RULE 2 : IF dx IS farbehind THEN angle IS muchsmaller;
	RULE 3 : IF dx IS behind THEN speed IS faster;
	RULE 4 : IF dx IS behind THEN angle IS smaller;
	RULE 5 : IF dx IS ahead THEN speed IS slower;
	RULE 6 : IF dx IS ahead THEN angle IS bigger;
	RULE 7 : IF dx IS farahead THEN speed IS muchslower;
	RULE 8 : IF dx IS farahead THEN angle IS muchbigger; */
END_RULEBLOCK

END_FUNCTION_BLOCK

